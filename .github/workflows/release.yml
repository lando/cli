name: Create Releases

on:
  release:
    types:
      - published

jobs:
  package:
    runs-on: ubuntu-22.04
    env:
      TERM: xterm
    strategy:
      matrix:
        arch:
          - x64
          - arm64
        node-version:
          - '16'
        os:
          - linux
          - macos
          - win
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - name: Install Yarn dependencies
        run: yarn install --prefer-offline --frozen-lockfile --production
      - name: Reset version if needed
        run: |
          node ./scripts/dev-version.js
          node ./bin/lando version
      - name: Package into node binary
        uses: lando/pkg-action@v2
        with:
          entrypoint: bin/lando.js
          arch: ${{ matrix.arch }}
          node-version: node${{ matrix.node-version }}
          os: ${{ matrix.os }}

  sign-n-deploy:
    runs-on: ${{ matrix.os }}
    needs:
      - package
    env:
      TERM: xterm
    strategy:
      matrix:
        include:
          - os: windows-2022
            key: cli-node16-win-x64-${{ github.sha }}
            file: lando/cli.exe
            certificate-data: WINDOZE_CERT_DATA
            certificate-password: WINDOZE_CERT_PASSWORD
            result: lando-win-x64-${{ github.ref_name }}.exe
          - os: windows-2022
            key: cli-node16-win-arm64-${{ github.sha }}
            file: lando/cli.exe
            certificate-data: WINDOZE_CERT_DATA
            certificate-password: WINDOZE_CERT_PASSWORD
            result: lando-win-arm64-${{ github.ref_name }}.exe
          - os: macos-12
            key: cli-node16-macos-x64-${{ github.sha }}
            file: lando/cli
            certificate-data: APPLE_CERT_DATA
            certificate-password: APPLE_CERT_PASSWORD
            apple-product-id: dev.lando.cli
            apple-team-id: FY8GAUX282
            apple-notary-user: APPLE_NOTARY_USER
            apple-notary-password: APPLE_NOTARY_PASSWORD
            options: --options runtime --entitlements entitlements.xml
            result: lando-macos-x64-${{ github.ref_name }}
          - os: macos-12
            key: cli-node16-macos-arm64-${{ github.sha }}
            file: lando/cli
            certificate-data: APPLE_CERT_DATA
            certificate-password: APPLE_CERT_PASSWORD
            apple-product-id: dev.lando.cli
            apple-team-id: FY8GAUX282
            apple-notary-user: APPLE_NOTARY_USER
            apple-notary-password: APPLE_NOTARY_PASSWORD
            options: --options runtime --entitlements entitlements.xml
            result: lando-macos-arm64-${{ github.ref_name }}
          - os: ubuntu-22.04
            key: cli-node16-linux-x64-${{ github.sha }}
            file: lando/cli
            result: lando-linux-x64-${{ github.ref_name }}
          - os: ubuntu-22.04
            key: cli-node16-linux-arm64-${{ github.sha }}
            file: lando/cli
            result: lando-linux-arm64-${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Download ${{ matrix.key }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.key }}
          path: lando
      - name: Sign and Notarize
        uses: lando/code-sign-action@v2
        id: code-sign-action
        with:
          file: ${{ matrix.file }}
          certificate-data: ${{ secrets[matrix.certificate-data] }}
          certificate-password: ${{ secrets[matrix.certificate-password] }}
          apple-notary-user: ${{ secrets[matrix.apple-notary-user] }}
          apple-notary-password: ${{ secrets[matrix.apple-notary-password] }}
          apple-product-id: ${{ matrix.apple-product-id }}
          apple-team-id: ${{ matrix.apple-team-id }}
          options: ${{ matrix.options }}
      - name: Rename as needed
        shell: bash
        run: |
          mkdir -p releases
          cp ${{ steps.code-sign-action.outputs.file }} releases/${{ matrix.result }}

          # if a latest release then push to stable tag
          if [ "${{ github.event.release.prerelease }}" ==  "false" ]; then
            cp releases/${{ matrix.result }} "releases/$(echo ${{ matrix.result }} | sed 's/${{ github.ref_name }}/stable/;')"
          fi

          # both latest/stable should push to edge
          cp releases/${{ matrix.result }} "releases/$(echo ${{ matrix.result }} | sed 's/${{ github.ref_name }}/edge/;')"

      - name: Configure S3 Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload releases to S3
        shell: bash
        run: aws s3 sync releases s3://files.lando.dev/cli
      - name: Upload releases to GitHub Releases
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: releases/${{ matrix.result }}
          fail_on_unmatched_files: true
